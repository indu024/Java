Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Java Code:
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        List<int[]> list=new ArrayList<>();
        int index=0;
       while(index< intervals.length){
        int start=intervals[index][0];
        int currend=intervals[index][1];
        

        while(index<intervals.length-1 && currend>=intervals[index+1][0]){
            currend=Math.max(currend,intervals[index+1][1]);
            index+=1;
        }
        int newend=currend;
        list.add(new int[]{start,newend});
        index+=1;
       }
        int[][] result=new int[list.size()][2];
         index=0;
        for(int[] i:list){
            result[index++]=i;
        }
        return result;
         
    }
}
